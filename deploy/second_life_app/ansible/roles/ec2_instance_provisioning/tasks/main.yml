---
  - name: create SSH key
    ec2_key:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      name: "{{ ssh_keyname }}"
      region: "{{ ec2_region }}"
    register: ec2_key_result

  - name: ec2 key result
    debug:
      var: ec2_key_result

  - name: save private SSH key
    copy:
      content: "{{ ec2_key_result.key.private_key }}" 
      dest: "~/.ssh/{{ ssh_keyname }}.pem" 
      mode: 0600
    when: ec2_key_result.changed

  - name: find suitable AMI
    ec2_ami_info:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ ec2_region }}"
      owners: 099720109477 # Canonical
      filters:
        architecture: x86_64
    register: amis
  - name: get the latest AMI
    set_fact:
      latest_ami: "{{ amis.images | sort(attribute='creation_date') | last }}"

  - name: Suitable AMI
    debug:
      var: latest_ami

  - name: ec2 instance provisioning
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ ec2_region }}"
      image: "{{ image_id }}"
      instance_type: t2.micro
      key_name: "{{ ssh_keyname }}"
      count: 1
      state: present
      group_id: "{{ group_id }}"
      wait: yes
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      assign_public_ip: yes
      instance_tags:
        Owner: "{{ owner }}"
        Stack: "{{ stack }}"
        Name: "{{ ec2_name }}"
    register: ec2_info

  - name: Add host to production group
    add_host:
      name: "{{ ec2_info.instances[0].public_ip }}"
      groups: production

  - name: Wait for SSH to come up
    local_action: wait_for 
                  host={{ item.public_ip }} 
                  port=22 
                  state=started
    with_items: "{{ec2_info.instances}}"

  - name: Set Ec2 instance public Ip in variable
    set_fact:
      ec2_public_ip: "{{ ec2_info.instances[0].public_ip }}"

